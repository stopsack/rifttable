[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/estimators_binary.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Binary outcomes","text":"example uses breastcancer data set risks package compares risk death (binary variable case) categories cancer stage. Absolute estimates Observations Outcomes Outcomes/Total Cases/Controls Risk Risk (95% CI) Outcomes (Risk) Outcomes/Total (Risk) Comparative estimates Risk ratio (95% CI) Risk difference (95% CI) Odds ratio (95% CI)","code":"library(rifttable) library(dplyr) data(breastcancer, package = \"risks\")  tibble::tribble(   ~label,                      ~type,   \"**Absolute estimates**\",    \"\",   \"Observations\",              \"total\",   \"Outcomes\",                  \"outcomes\",   \"Outcomes/Total\",            \"outcomes/total\",   \"Cases/Controls\",            \"cases/controls\",   \"Risk\",                      \"risk\",   \"Risk (95% CI)\",             \"risk (ci)\",   \"Outcomes (Risk)\",           \"outcomes (risk)\",   \"Outcomes/Total (Risk)\",     \"outcomes/total (risk)\",   \"\",                          \"\",   \"**Comparative estimates**\", \"\",   \"Risk ratio (95% CI)\",       \"rr\",   \"Risk difference (95% CI)\",  \"rd\",   \"Odds ratio (95% CI)\",       \"or\") %>%   mutate(     exposure = \"stage\",     outcome = \"death\") %>%   rifttable(     data = breastcancer,     overall = TRUE) %>%   rt_gt()  # Formatted output"},{"path":[]},{"path":[]},{"path":"/articles/estimators_continuous.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Continuous outcomes","text":"example uses cancer data survival package. compare patient age ECOG performance status, recode variable ph.ecog categorical (factor) exclude patients rare elevated ecog.ps: Absolute estimates Observations Range Mean Mean (.e., arithmetic mean) Mean (95% CI) Mean (standard deviation) Geometric mean Median Median (interquartile range) Comparative estimates Mean difference (95% CI) Median difference (95% CI) Mean ratio arithmetic means arithmetic means, empirical SE geometric means","code":"library(dplyr) library(rifttable) data(cancer, package = \"survival\") cancer <- cancer %>%   filter(ph.ecog < 3) %>%   mutate(ph.ecog = factor(ph.ecog)) attr(cancer$ph.ecog, which = \"label\") <- \"ECOG performance status\"  tribble(   ~label,                                       ~type,   \"**Absolute estimates**\",                     \"\",   \"Observations\",                               \"total\",   \"Range\",                                      \"range\",   \"Mean\",                                       \"\",    \"  Mean (i.e., arithmetic mean)\",             \"mean\",   \"  Mean (95% CI)\",                            \"mean (ci)\",   \"  Mean (standard deviation)\",                \"mean (sd)\",   \"  Geometric mean\",                           \"geomean\",   \"Median\",                                     \"median\",   \"Median (interquartile range)\",               \"median (iqr)\",   \"\",                                           \"\",   \"**Comparative estimates**\",                  \"\",   \"Mean difference (95% CI)\",                   \"diff\",   \"Median difference (95% CI)\",                 \"quantreg\",   \"Mean ratio\",                                 \"\",   \"  of arithmetic means\",                      \"fold\",   \"  of arithmetic means, empirical SE\",        \"irrrob\",   \"  of geometric means\",                       \"foldlog\") %>%   mutate(     exposure = \"ph.ecog\",     outcome = \"age\") %>%   rifttable(     data = cancer,      diff_digits = 1,  # Suppress unnecessary precision in most estimates     # Show extraneous digits to highlight (minor) differences in ratio  models:     ratio_digits = 3,     overall = TRUE) %>%     rt_gt()  # obtain formatted output"},{"path":[]},{"path":[]},{"path":"/articles/estimators_continuous.html","id":"more-on-ratios-of-continuous-outcomes","dir":"Articles","previous_headings":"","what":"More on ratios of continuous outcomes","title":"Continuous outcomes","text":"Three types ratios continuous outcomes implemented rifttable(): models, exponentiation, beta coefficients can interpreted ratios. rifttable automatically necessary transformations. cancer data, ratios usual (arithmetic) means age considered informative, given hist(cancer$age) etc. show major skew outcome.","code":""},{"path":"/articles/estimators_survival.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Survival outcomes","text":"example uses cancer data set survival package compares survival, defined time variable time (recoded years) event variable status (recoded 1 = death, 0 = censored), sex. Absolute estimates Counts sums Observations, N Events, n Events/observations Events/person-years Follow-Person-years Maximum follow-, years Median follow-, years Median follow-(IQR), years Rates Rate per 1000 person-years Rate per 1000 person-years (95% CI) Events/py (rate per 1000 py) Risks 1-year survival 1-year survival (95% CI) 1-year risk/cumulative incidence 1-year risk (95% CI) Median survival, years Median survival (95 CI), years Comparative estimates 1-year survival difference 1-year risk difference 1-year survival ratio 1-year risk ratio Hazard ratio (95% CI)","code":"library(rifttable) data(cancer, package = \"survival\")  cancer <- cancer %>%   tibble::as_tibble() %>%   dplyr::mutate(     # The exposure (here, 'sex') must be categorical (a factor)     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")),     time = time / 365.25,  # transform to years     status = status - 1)  tibble::tribble(   ~label,                                  ~type,   \"**Absolute estimates**\",                \"\",   \"*Counts and sums*\",                     \"\",   \"  Observations, *N*\",                   \"total\",   \"  Events, *n*\",                         \"events\",   \"  Events/observations\",                 \"events/total\",   \"  Events/person-years\",                 \"events/time\",   \"*Follow-up*\",                           \"\",   \"  Person-years\",                        \"time\",   \"  Maximum follow-up, years\",            \"maxfu\",   \"  Median follow-up, years\",             \"medfu\",   \"  Median follow-up (IQR), years\",       \"medfu (iqr)\",   \"*Rates*\",                               \"\",   \"  Rate per 1000 person-years\",          \"rate\",   \"  Rate per 1000 person-years (95% CI)\", \"rate (ci)\",   \"  Events/py (rate per 1000 py)\",        \"events/time (rate)\",   \"*Risks*\",                               \"\",   \"  1-year survival\",                     \"surv\",   \"  1-year survival (95% CI)\",            \"surv (ci)\",   \"  1-year risk/cumulative incidence\",    \"cuminc\",   \"  1-year risk (95% CI)\",                \"cuminc (ci)\",   \"  Median survival, years\",              \"medsurv\",   \"  Median survival (95 CI), years\",      \"medsurv (ci)\",   \"\",                                      \"\",   \"**Comparative estimates**\",             \"\",   \"  1-year survival difference\",          \"survdiff\",   \"  1-year risk difference\",              \"cumincdiff\",   \"  1-year survival ratio\",               \"survratio\",   \"  1-year risk ratio\",                   \"cumincratio\",   \"  Hazard ratio (95% CI)\",               \"hr\") %>%   dplyr::mutate(     time = \"time\",      event = \"status\",      exposure = \"sex\",     arguments = list(list(timepoint = 1))) %>%   rifttable(     data = cancer,      overall = TRUE) %>%   rt_gt()"},{"path":[]},{"path":[]},{"path":"/articles/estimators_survival.html","id":"competing-events","dir":"Articles","previous_headings":"","what":"Competing events","title":"Survival outcomes","text":"one event type, event variable two levels: censoring, typically encoded 0, event, typically encoded 1. competing events, event variable additional levels. survival::Surv() function used rifttable assumes first-ordered level represents censoring others different non-censoring events. example, event variable factor, \"Censoring\" needs first factor’s levels(). necessary specify event interest design competing events present. example, event variable factor variable status_competing, levels \"Censored\", \"Outcome interest\", \"-cause death\", specify event = \"status_competing@Outcome interest\" table design. See tables competing events handled. details noted, event interest recoded sole event events considered censoring.","code":""},{"path":"/articles/estimators_survival.html","id":"weighted-estimates","dir":"Articles","previous_headings":"","what":"Weighted estimates","title":"Survival outcomes","text":"name weights variable, example inverse-probability weights, can provided via column weights design table. Weights, present, used comparative estimators survival well type = \"cuminc\" type = \"surv\", ignored otherwise.","code":""},{"path":"/articles/faq.html","id":"basic-example","dir":"Articles","previous_headings":"","what":"Basic example","title":"Frequently Asked Questions","text":"subsequent examples build simple rifttable: Overall Deaths/N Risk Risk ratio (95% CI) Risk difference (95% CI) Low hormone receptor Deaths/N (Risk) Risk difference (95% CI) High hormone receptor Deaths/N (Risk) Risk difference (95% CI)","code":"library(rifttable) library(dplyr)  # for data management, e.g., mutate() library(tibble)  # for constructing a tibble, e.g. via tribble() data(breastcancer, package = \"risks\")  design <- tribble(   ~label,                       ~type,                   ~stratum,            \"**Overall**\",                \"\",                      \"\",                  \"  Deaths/N\",                 \"outcomes/total\",        c(\"Low\", \"High\"),    \"  Risk\",                     \"risk\",                  c(\"Low\", \"High\"),    \"  Risk ratio (95% CI)\",      \"rr\",                    c(\"Low\", \"High\"),    \"  Risk difference (95% CI)\", \"rd\",                    c(\"Low\", \"High\"),    \"\",                           \"\",                      \"\",                  \"**Low hormone receptor**\",   \"\",                      \"\",                  \"  Deaths/N (Risk)\",          \"outcomes/total (risk)\", \"Low\",              \"  Risk difference (95% CI)\", \"rd\",                    \"Low\",              \"**High hormone receptor**\",  \"\",                      \"\",                  \"  Deaths/N (Risk)\",          \"outcomes/total (risk)\", \"High\",   \"  Risk difference (95% CI)\", \"rd\",                    \"High\") %>%   mutate(     exposure = \"stage\",     outcome = \"death\",     effect_modifier = \"receptor\")  rifttable(   design = design,   data = breastcancer) %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"why-do-i-get-an-error","dir":"Articles","previous_headings":"","what":"Why do I get an error?","title":"Frequently Asked Questions","text":"R’s error messages can frustrating. using rifttable, typical sources errors: Clerical errors variable names arguments. magic except double-checking code. Missing data. See : handle missing data?. Discrepancy estimator (type) data. example, type = \"mean\" work categorical (factor) variable. Models fail converge. example, one may trying estimate risk ratio 0 outcomes reference category, adjusting 20 covariates Cox model 5 events overall. (Sometimes attempts “just” return warning messages – still worth rethinking modeling strategy.) identify error coming , start simple. Comment one line design, putting # beginning line. Start line gives basic descriptive data, type = \"total\", type = \"outcomes\" type = \"events/time\", re-run rifttable(). add lines descriptive estimators, one one. end, add lines fit models, type = \"hr\".","code":""},{"path":"/articles/faq.html","id":"what-is-the-design","dir":"Articles","previous_headings":"","what":"What is the design?","title":"Frequently Asked Questions","text":"design rifttable() function takes input simply dataset defines table look like rifttable() processed data. design can constructed many different ways. lead table: dataset (tibble) defined using tribble() N Deaths dataset (tibble) defined using tibble() N Deaths Concatenating tibbles, editing mutate() N Deaths descriptive tables: Use table1_design() N Death See separate overview descriptive Table 1. External datasets design even written external dataset can loaded readr::read_csv() (CSV files) readxl::read_excel() (Excel sheets).","code":"design1 <- tribble(   ~label,   ~exposure, ~outcome, ~type,   \"N\",      \"stage\",   \"death\",  \"total\",   \"Deaths\", \"stage\",   \"death\",  \"outcomes\") design1 #> # A tibble: 2 × 4 #>   label  exposure outcome type     #>   <chr>  <chr>    <chr>   <chr>    #> 1 N      stage    death   total    #> 2 Deaths stage    death   outcomes rifttable(   design = design1,   data = breastcancer) %>%   rt_gt() design2 <- tibble(     label = c(\"N\", \"Deaths\"),     exposure = \"stage\",     outcome = \"death\",      type = c(\"total\", \"outcomes\")) design2 #> # A tibble: 2 × 4 #>   label  exposure outcome type     #>   <chr>  <chr>    <chr>   <chr>    #> 1 N      stage    death   total    #> 2 Deaths stage    death   outcomes rifttable(   design = design2,   data = breastcancer) %>%   rt_gt() design3 <- bind_rows(   tibble(  # row 1     label = \"N\",     type = \"total\"),   tibble(  # row 2     label = \"Deaths\",     type = \"outcomes\")) %>%   mutate(  # elements that are the same for all rows     exposure = \"stage\",     outcome = \"death\") design3 #> # A tibble: 2 × 4 #>   label  type     exposure outcome #>   <chr>  <chr>    <chr>    <chr>   #> 1 N      total    stage    death   #> 2 Deaths outcomes stage    death rifttable(   design = design3,   data = breastcancer) %>%   rt_gt() design4 <- breastcancer %>%   table1_design(     death,  # the total count will automatically be included     by = stage) design4 #> # A tibble: 2 × 4 #>   label outcome type            exposure #>   <chr> <chr>   <chr>           <chr>    #> 1 N     \"\"      total           stage    #> 2 Death \"death\" outcomes (risk) stage rifttable(   design = design4,   data = breastcancer) %>%   rt_gt()"},{"path":"/articles/faq.html","id":"how-do-i-handle-missing-data","dir":"Articles","previous_headings":"","what":"How do I handle missing data?","title":"Frequently Asked Questions","text":"rifttable tries make assumptions possible user wants treat missing data. Missing values exposure: default, missing vales (NA) exposure displayed separate exposure category descriptive statistics (e.g., type = \"total\" type = \"mean\"). omitted comparative estimators (e.g., regression models). change behavior, call rifttable() argument exposure_levels = \"nona\". Missing values outcome: default, descriptive statistics missing (e.g., results -- NA), regression models use non-missing observations. exclude observations missing outcome values altogether, add na_rm = TRUE (specific rows ) design. Missing values confounders: Applies regression models, typically exclude observations missing values. Missing values effect modifier: Stratified joint models shown specified stratum effect_modifier. include observations missing effect modifier, add NA requested stratum design, e.g., effect_modifier = \"bmi\", stratum = c(\"<25\", NA).","code":""},{"path":"/articles/faq.html","id":"how-do-i-add-overall-statistics","dir":"Articles","previous_headings":"","what":"How do I add overall statistics?","title":"Frequently Asked Questions","text":"Use overall argument show descriptive data entire data set. Inferential estimators showing comparisons exposure categories blank . Overall Deaths/N Risk Risk ratio (95% CI) Risk difference (95% CI) Low hormone receptor Deaths/N (Risk) Risk difference (95% CI) High hormone receptor Deaths/N (Risk) Risk difference (95% CI)","code":"rifttable(   design = design,   data = breastcancer,    overall = TRUE) %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"how-do-i-test-for-trend","dir":"Articles","previous_headings":"","what":"How do I test for trend?","title":"Frequently Asked Questions","text":"Instead testing null hypothesis trend, rifttable proposes estimating difference outcome one-unit higher exposure. also called linear slope. , estimate risk associated stage one category higher. Overall Deaths/N Risk Risk ratio (95% CI) Risk difference (95% CI) Low hormone receptor Deaths/N (Risk) Risk difference (95% CI) High hormone receptor Deaths/N (Risk) Risk difference (95% CI)","code":"rifttable(   design = design %>%     mutate(trend = \"stage_numeric\"),   data = breastcancer %>%     mutate(stage_numeric = as.numeric(stage))) %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"how-do-i-show-multiple-exposures-in-the-same-table","dir":"Articles","previous_headings":"","what":"How do I show multiple exposures in the same table?","title":"Frequently Asked Questions","text":"simple toy dataset just one exposure variable. demonstration, just create second variable, two categories, “Level 1” “Level 2,” simplified combination stage receptor variables. flip table layout \"rows\" (default) \"cols\" concatenate two rifttables. also need give new exposure2 variable label stage make sure results appear column. Level 1 Level 2 Stage Stage II Stage III","code":"breastcancer_2exposures <- breastcancer %>%   mutate(     exposure2 = case_when(       stage == \"Stage I\" |          (stage == \"Stage II\" & receptor == \"High\") ~          \"Level 1\",       stage == \"Stage III\" |          (stage == \"Stage II\" & receptor == \"Low\") ~          \"Level 2\"))  attr(breastcancer_2exposures$exposure2, which = \"label\") <- \"Exposure\" attr(breastcancer_2exposures$stage, which = \"label\") <- \"Exposure\"  bind_rows(   design %>%     mutate(exposure = \"exposure2\") %>%     slice(2:5) %>%     rifttable(       data = breastcancer_2exposures,        layout = \"cols\"),   design %>%     slice(2:5) %>%     rifttable(       data = breastcancer_2exposures,        layout = \"cols\")) %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"how-do-i-change-how-results-are-rounded","dir":"Articles","previous_headings":"","what":"How do I change how results are rounded?","title":"Frequently Asked Questions","text":"default, difference measures rounded 2 decimal digits (0.01), type = \"diff\", mean difference, type = \"quantreg\", median difference. goes risk measures, type = \"risk\", unless shown percentage points. Ratio measures also shown 2 decimal digits, type = \"hr\", hazard ratio, type = \"fold\", ratio arithmetric means. Rounding can changed setting rifttable() arguments diff_digits, risk_digits, ratio_digits globally entire table. Deaths/N Risk Risk ratio (95% CI) Odds ratio (95% CI) Risk difference (95% CI) can seen, ratios > 3 still shown 1 fewer decimal, ratios > 10 shown 2 fewer decimals (Wilcox, Epidemiology 2004 motivates ). disable additional rounding extremely high ratios: Deaths/N Risk Risk ratio (95% CI) Odds ratio (95% CI) Risk difference (95% CI) Additionally, rounding can changed row, adding column digits rifttable design: Deaths/N Risk Risk ratio (95% CI) Rounded 1 digit Rounded 2 digits Risk difference (95% CI)","code":"design <- tribble(   ~label,                     ~type,   \"Deaths/N\",                 \"outcomes/total\",    \"Risk\",                     \"risk\",             \"Risk ratio (95% CI)\",      \"rr\",    \"Odds ratio (95% CI)\",      \"or\",    \"Risk difference (95% CI)\", \"rd\") %>%   mutate(     exposure = \"stage\",     outcome = \"death\")  rifttable(   design = design,   data = breastcancer,   ratio_digits = 3,  # Many digits for ratios   risk_digits = 1) %>%  # Fewer digits for risks   rt_gt()  # obtain formatted output rifttable(   design = design,   data = breastcancer,   ratio_digits = 3,   ratio_digits_decrease = NULL,  # Do not round high ratios more   risk_digits = 1) %>%   rt_gt()  # obtain formatted output tribble(   ~label,                     ~type,            ~digits,   \"Deaths/N\",                 \"outcomes/total\", NA,  # Uses rifttable default   \"Risk\",                     \"risk\",           NA,  # Uses risk_digits below   \"Risk ratio (95% CI)\",      \"\",               NA,   \"  Rounded to 1 digit\",     \"rr\",             1,   \"  Rounded to 2 digits\",    \"rr\",             2,   \"Risk difference (95% CI)\", \"rd\",             3) %>%  # Overrides risk_digits   mutate(     exposure = \"stage\",     outcome = \"death\") %>% rifttable(   data = breastcancer,   risk_digits = 1) %>%  # Fewer digits for risks, unless specified by \"digits\"   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"how-can-i-create-joint-models","dir":"Articles","previous_headings":"","what":"How can I create joint models?","title":"Frequently Asked Questions","text":"default, regression models fit separately stratum effect_modifier. Append \"_joint\" \"hr\", \"rr\", \"rd\", \"irr\", \"irrrob\", \"diff\", \"fold\", \"foldlog\", \"quantreg\", \"\" obtain “joint” models exposure effect modifier single reference category. Note joint model fit across non-missing (NA) strata effect modifier, even design table request strata shown. Compare stratified models joint models risk differences (simplicity presentation, count data omitted): Overall Stratified models Low hormone receptor High hormone receptor Joint models Low hormone receptor High hormone receptor","code":"tribble(   ~label,                       ~type,      ~stratum,            \"**Overall**\",                \"rd\",       c(\"Low\", \"High\"),    \"\",                           \"\",         \"\",                  \"**Stratified models**\",      \"\",         \"\",                  \"  Low hormone receptor\",     \"rd\",       \"Low\",              \"  High hormone receptor\",    \"rd\",       \"High\",              \"\",                           \"\",         \"\",                  \"**Joint models**\",           \"\",         \"\",                  \"  Low hormone receptor\",     \"rd_joint\", \"Low\",   \"  High hormone receptor\",    \"rd_joint\", \"High\") %>%   mutate(     exposure = \"stage\",     outcome = \"death\",     effect_modifier = \"receptor\") %>%   rifttable(data = breastcancer) %>%   rt_gt()"},{"path":"/articles/faq.html","id":"how-can-i-change-the-reference-category","dir":"Articles","previous_headings":"","what":"How can I change the reference category?","title":"Frequently Asked Questions","text":"reference categories exposure effect modifier always first factor levels. Compare preceding example: \"High\" , alphabetically, \"Low\". change reference category, use forcats::fct_relevel() base R alternative relevel() variables data provided rifttable(): Joint models Low hormone receptor High hormone receptor middle category exposure stage desired reference: RD (95% CI) Using forcats::fct_relevel() may preferable relevel(), preserves variable label: , variable stage lost label, \"Stage\" starting upper case S. results “Stage II” now listed first probably undesirable. Reorder columns table rifttable() produced print results “Stage ” first: RD (95% CI)","code":"tribble(   ~label,                       ~type,      ~stratum,            \"**Joint models**\",           \"\",         \"\",                  \"  Low hormone receptor\",     \"rd_joint\", \"Low\",   \"  High hormone receptor\",    \"rd_joint\", \"High\") %>%   mutate(     exposure = \"stage\",     outcome = \"death\",     effect_modifier = \"receptor\") %>%   rifttable(     data = breastcancer %>%       mutate(         receptor = relevel(           factor(receptor),  # Make \"receptor\" a factor in the first place           ref = \"Low\"))) %>%  # Set new reference category   rt_gt() result_reordered <- tibble(   label = \"**RD (95% CI)**\",   type = \"rd\",   exposure = \"stage\",   outcome = \"death\") %>%   rifttable(     data = breastcancer %>%       mutate(         stage = relevel(           stage,           ref = \"Stage II\")))  result_reordered %>%   rt_gt() result_reordered %>%   select(stage, \"Stage I\", everything()) %>%   rt_gt()"},{"path":"/articles/faq.html","id":"how-i-do-i-change-the-level-for-confidence-intervals","dir":"Articles","previous_headings":"","what":"How I do I change the level for confidence intervals?","title":"Frequently Asked Questions","text":"Add ci column design: Deaths/N (Risk) Risk ratio 80% CI 95% CI 99% CI","code":"tribble(   ~label,            ~type,                   ~ci,   \"Deaths/N (Risk)\", \"outcomes/total (risk)\", NA,   \"Risk ratio\",      \"\",                      NA,   \"  80% CI\",        \"rr\",                    0.8,   \"  95% CI\",        \"rr\",                    NA,  # Defaults to 0.95   \"  99% CI\",        \"rr\",                    0.99) %>%   mutate(     exposure = \"stage\",     outcome = \"death\") %>%   rifttable(     data = breastcancer,     risk_percent = TRUE) %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/faq.html","id":"how-do-i-make-rifttable-calculate-an-estimand-that-is-not-built-in","dir":"Articles","previous_headings":"","what":"How do I make rifttable calculate an estimand that is not built-in?","title":"Frequently Asked Questions","text":"package provides number estimators commonly used epidemiology, never able include possible estimators. However, custom estimate can integrated rifttable defining custom estimation function. subsequent example reproduce following basic rifttable, shows mean age sex, stratified ECOG performance status, cancer data set: ECOG PS 1: mean age ECOG PS 2: mean age Instead relying rifttable’s built-estimator type = \"mean\", define custom function calculates mean: Use custom function my_mean instead built-mean: ECOG PS 1: mean age (custom) ECOG PS 2: mean age (custom) Specifications custom functions: function name must start estimate_; prefix omitted later calling custom function within rifttable(). data provided rifttable() available custom function argument named data. data already subsetted stratum effect_modifier, applicable. Copies key variables accessible names, .exposure, .outcome, .event, .time, .time2, applicable. function must accept elements rifttable design (e.g., confounders, digits, na_rm, etc.) rifttable() function (e.g., reference, risk_percent) arguments. Many may relevant can captured argument list, ... (see example). function must return tibble/data frame one column .exposure, one row per exposure category, one string column res estimate.","code":"data(cancer, package = \"survival\") cancer <- cancer %>%   tibble::as_tibble() %>%   mutate(     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")))  design <- tibble::tibble(   type = \"mean\",   exposure = \"sex\",   outcome = \"age\",   effect_modifier = \"ph.ecog\",   stratum = 1:2,   label = paste0(\"ECOG PS \", stratum, \": mean age\"))  design %>%   rifttable(     data = cancer,     overall = TRUE) %>%   rt_gt() estimate_my_mean <- function(data, ...) {   data %>%     group_by(.exposure) %>%     summarize(       res = paste(         round(           mean(.outcome),           digits = 3),         \"yrs\")) } design %>%  # Edit the previous design   mutate(     type = \"my_mean\",  # Replace built-in \"mean\" by custom \"my_mean\"     label = paste0(label, \" (custom)\")) %>%   rifttable(     data = cancer,     overall = TRUE) %>%   rt_gt()"},{"path":"/articles/rifttable.html","id":"loading-the-package","dir":"Articles","previous_headings":"","what":"Loading the package","title":"Get started with rifttable","text":"installation (using remotes::install_github(\"stopsack/rifttable\")), load package :","code":"library(rifttable)"},{"path":"/articles/rifttable.html","id":"loading-example-data","dir":"Articles","previous_headings":"","what":"Loading example data","title":"Get started with rifttable","text":"cancer dataset survival package used :","code":"data(cancer, package = \"survival\")  cancer <- cancer %>%   tibble::as_tibble() %>%   dplyr::mutate(     # The exposure (here, 'sex') must be categorical     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")),     time = time / 365.25,     status = status - 1)  cancer #> # A tibble: 228 × 10 #>     inst  time status   age sex    ph.ecog ph.karno pat.karno meal.cal wt.loss #>    <dbl> <dbl>  <dbl> <dbl> <fct>    <dbl>    <dbl>     <dbl>    <dbl>   <dbl> #>  1     3 0.838      1    74 Male         1       90       100     1175      NA #>  2     3 1.25       1    68 Male         0       90        90     1225      15 #>  3     3 2.77       0    56 Male         0       90        90       NA      15 #>  4     5 0.575      1    57 Male         1       90        60     1150      11 #>  5     1 2.42       1    60 Male         0      100        90       NA       0 #>  6    12 2.80       0    74 Male         1       50        80      513       0 #>  7     7 0.849      1    68 Female       2       70        60      384      10 #>  8    11 0.988      1    71 Female       2       60        80      538       1 #>  9     1 0.597      1    53 Male         1       70        80      825      16 #> 10     7 0.454      1    61 Male         2       70        70      271      34 #> # ℹ 218 more rows"},{"path":"/articles/rifttable.html","id":"example-1-basic-use-with-binary-outcomes","dir":"Articles","previous_headings":"","what":"Example 1: Basic use with binary outcomes","title":"Get started with rifttable","text":"Set table design: Generate rifttable:","code":"design1 <- tibble::tibble(   label = c(     \"Outcomes\",     \"Total\",     \"Outcomes/Total\",     \"Risk\",     \"Risk (CI)\",     \"Outcomes (Risk)\",     \"Outcomes/Total (Risk)\",     \"RR\",     \"RD\")) %>%   dplyr::mutate(     type = label,     exposure = \"sex\",     outcome = \"status\") rifttable(   design = design1,    data = cancer) #> # A tibble: 9 × 3 #>   sex                   Male              Female               #>   <chr>                 <chr>             <chr>                #> 1 Outcomes              112               53                   #> 2 Total                 138               90                   #> 3 Outcomes/Total        112/138           53/90                #> 4 Risk                  0.81              0.59                 #> 5 Risk (CI)             0.81 (0.74, 0.87) 0.59 (0.49, 0.68)    #> 6 Outcomes (Risk)       112 (0.81)        53 (0.59)            #> 7 Outcomes/Total (Risk) 112/138 (0.81)    53/90 (0.59)         #> 8 RR                    1 (reference)     0.73 (0.60, 0.88)    #> 9 RD                    0 (reference)     -0.22 (-0.34, -0.10)"},{"path":"/articles/rifttable.html","id":"example-2-formatted-output","dir":"Articles","previous_headings":"","what":"Example 2: Formatted output","title":"Get started with rifttable","text":"example uses design Example 1 . far, tables produced just running code shown appearance like output R console. obtain formatted tables HTML output documents, pipe output rifttable() table formatting function knitr::kable(): works well output formats, supports limited formatting. Add YAML header statement df_print: kable print tables using kable. gt::gt(): supports advanced formatting output longer human-readable. rifttable package provides rt_gt() wrapper function. knitting HTML, PDF, Word, functions wrapper gt::gt(), passing along indentations label table design. knitting Markdown document (.md), github_document (RMarkdown) gfm (Quarto), rt_gt() automatically provide plain table output using kable package. Outcomes Total Outcomes/Total Risk Risk (CI) Outcomes (Risk) Outcomes/Total (Risk) RR RD","code":"rifttable(   design = design1,    data = cancer) %>%    rt_gt()"},{"path":"/articles/rifttable.html","id":"example-3-swap-rows-and-columns","dir":"Articles","previous_headings":"","what":"Example 3: Swap rows and columns","title":"Get started with rifttable","text":"use design columns instead rows, showing three types: Male Female","code":"rifttable(   design = design1 %>%     dplyr::filter(label %in% c(       \"Outcomes/Total (Risk)\",       \"RR\",        \"RD\")),   data = cancer,   layout = \"cols\") %>%    rt_gt()"},{"path":"/articles/rifttable.html","id":"example-4-survival-outcomes-effect-modifier-and-confounder","dir":"Articles","previous_headings":"","what":"Example 4: Survival outcomes, effect modifier, and confounder","title":"Get started with rifttable","text":"Survival outcomes use time event variables design (type2, late entry, survival::Surv()), rather outcome variable used binary, categorical, continuous outcomes. Set table design: Generate rifttable: Overall Events Person-years Rate/1000 py (95% CI) Unadjusted HR (95% CI) Age-adjusted HR (95% CI) Stratified models ECOG PS1 (events/N) Unadjusted Age-adjusted ECOG PS2 (events/N) Unadjusted Age-adjusted Joint model, age-adj. ECOG PS1 ECOG PS2","code":"design2 <- tibble::tribble(   # Elements that vary by row:   ~label,                       ~stratum, ~confounders, ~type,   \"**Overall**\",                NULL,     \"\",           \"blank\",   \"  Events\",                   NULL,     \"\",           \"events\",   \"  Person-years\",             NULL,     \"\",           \"time\",   \"  Rate/1000 py (95% CI)\",    NULL,     \"\",           \"rate (ci)\",   \"  Unadjusted HR (95% CI)\",   NULL,     \"\",           \"hr\",   \"  Age-adjusted HR (95% CI)\", NULL,     \"+ age\",      \"hr\",   \"\",                           NULL,     \"\",           \"blank\",   \"**Stratified models**\",      NULL,     \"\",           \"\",   \"*ECOG PS1* (events/N)\",      1,        \"\",           \"events/total\",   \"  Unadjusted\",               1,        \"\",           \"hr\",   \"  Age-adjusted\",             1,        \"+ age\",      \"hr\",   \"*ECOG PS2* (events/N)\",      2,        \"\",           \"events/total\",   \"  Unadjusted\",               2,        \"\",           \"hr\",   \"  Age-adjusted\",             2,        \"+ age\",      \"hr\",   \"\",                           NULL,     \"\",           \"\",   \"**Joint model**, age-adj.\",  NULL,     \"\",           \"\",   \"  ECOG PS1\",                 1,        \"+ age\",      \"hr_joint\",   \"  ECOG PS2\",                 2,        \"+ age\",      \"hr_joint\") %>%   # Elements that are the same for all rows:   dplyr::mutate(     exposure = \"sex\",     event = \"status\",     time = \"time\",     effect_modifier = \"ph.ecog\") rifttable(   design = design2,   data = cancer %>%      dplyr::filter(ph.ecog %in% 1:2)) %>%    rt_gt(md = 1)"},{"path":"/articles/rifttable.html","id":"example-5-two-estimates-using-type-and-type2","dir":"Articles","previous_headings":"","what":"Example 5: Two estimates using type and type2","title":"Get started with rifttable","text":"ECOG PS1 ECOG PS2 estimate type columns: Male Female","code":"design3 <- tibble::tribble(   ~label,     ~stratum, ~type,          ~type2,   \"ECOG PS1\", 1,        \"events/total\", \"hr\",   \"ECOG PS2\", 2,        \"events/total\", \"hr\") %>%   dplyr::mutate(     exposure = \"sex\",     event = \"status\",     time = \"time\",     confounders = \"+ age\",     effect_modifier = \"ph.ecog\")  rifttable(   design = design3,   data = cancer %>%      dplyr::filter(ph.ecog %in% 1:2)) %>%    rt_gt() rifttable(   design = design3,   data = cancer %>%      dplyr::filter(ph.ecog %in% 1:2),   layout = \"cols\",    type2_layout = \"cols\") %>%    rt_gt()"},{"path":"/articles/rifttable.html","id":"example-6-continuous-outcomes-rounding-and-trend-slope","dir":"Articles","previous_headings":"","what":"Example 6: Continuous outcomes, rounding, and trend (slope)","title":"Get started with rifttable","text":"Request rounding 1 decimal digit cases; add continuous trend, .e., slope per one unit trend variable: Marginal mean (95% CI) Male Female Stratified model Male Female Joint model Male Female","code":"tibble::tribble(   ~label,                   ~stratum, ~type,        ~digits,   \"Marginal mean (95% CI)\", NULL,     \"mean (ci)\",  1,   \"  Male\",                 \"Male\",   \"mean\",       NA,   \"  Female\",               \"Female\", \"mean\",       NA,   \"\",                       NULL,     \"\",           NA,   \"Stratified model\",       NULL,     \"\",           NA,   \"  Male\",                 \"Male\",   \"diff\",       1,   \"  Female\",               \"Female\", \"diff\",       1,   \"\",                       NULL,     \"\",           NA,   \"Joint model\",            NULL,     \"\",           NA,   \"  Male\",                 \"Male\",   \"diff_joint\", NA,   \"  Female\",               \"Female\", \"diff_joint\", NA) %>%   dplyr::mutate(     exposure = \"ph.ecog_factor\",     trend = \"ph.ecog\",     outcome = \"age\",     effect_modifier = \"sex\") %>%   rifttable(     data = cancer %>%       dplyr::filter(ph.ecog < 3) %>%       dplyr::mutate(ph.ecog_factor = factor(ph.ecog))) %>%    rt_gt()"},{"path":"/articles/table1.html","id":"loading-the-package","dir":"Articles","previous_headings":"","what":"Loading the package","title":"A Descriptive Table 1","text":"installation (using remotes::install_github(\"stopsack/rifttable\")), load package :","code":"library(rifttable)"},{"path":"/articles/table1.html","id":"data-handling","dir":"Articles","previous_headings":"","what":"Data handling","title":"A Descriptive Table 1","text":"example uses cancer dataset survival package.","code":"library(dplyr)  # for data handling data(cancer, package = \"survival\") cancer <- cancer %>%   tibble::as_tibble() %>%   dplyr::mutate(     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")),     ph.ecog = factor(ph.ecog))"},{"path":"/articles/table1.html","id":"generate-a-table-design","dir":"Articles","previous_headings":"","what":"Generate a table design","title":"A Descriptive Table 1","text":"rifttable’s table1_design() generates design table can passed rifttable().","code":"design <- cancer %>%   table1_design(     age, ph.ecog, ph.karno, pat.karno,  # leave empty to include all variables     by = sex)  # Print the design for illustration purposes design #> # A tibble: 12 × 5 #>    label       outcome          type              na_rm exposure #>    <chr>       <chr>            <chr>             <lgl> <chr>    #>  1 \"N\"         \"\"               \"total\"           NA    sex      #>  2 \"age\"       \"age\"            \"median (iqr)\"    FALSE sex      #>  3 \"ph.ecog\"   \"\"               \"\"                FALSE sex      #>  4 \"  0\"       \"ph.ecog@0\"      \"outcomes (risk)\" TRUE  sex      #>  5 \"  1\"       \"ph.ecog@1\"      \"outcomes (risk)\" TRUE  sex      #>  6 \"  2\"       \"ph.ecog@2\"      \"outcomes (risk)\" TRUE  sex      #>  7 \"  3\"       \"ph.ecog@3\"      \"outcomes (risk)\" TRUE  sex      #>  8 \"  Unknown\" \"ph.ecog@_NA_\"   \"outcomes\"        FALSE sex      #>  9 \"ph.karno\"  \"ph.karno\"       \"median (iqr)\"    TRUE  sex      #> 10 \"  Unknown\" \"ph.karno@_NA_\"  \"outcomes\"        FALSE sex      #> 11 \"pat.karno\" \"pat.karno\"      \"median (iqr)\"    TRUE  sex      #> 12 \"  Unknown\" \"pat.karno@_NA_\" \"outcomes\"        FALSE sex"},{"path":"/articles/table1.html","id":"obtain-table-1","dir":"Articles","previous_headings":"","what":"Obtain Table 1","title":"A Descriptive Table 1","text":"N age ph.ecog 0 1 2 3 Unknown ph.karno Unknown pat.karno Unknown note, dataset passed along silently together design. However, design can applied different data, contains variable names, e.g., rifttable(design = design, data = otherdata).","code":"design %>%   rifttable() %>%   rt_gt()  # obtain formatted output"},{"path":"/articles/table1.html","id":"customize-the-table","dir":"Articles","previous_headings":"","what":"Customize the table","title":"A Descriptive Table 1","text":"Label variables, set custom rounding, change estimands, add “Overall” column. N Age, years Physician-rated ECOG score 0 1 2 3 Unknown Physician-rated Karnofsky score Unknown Patient-rated Karnofsky score Unknown","code":"# Alternative: set_variable_labels() from the {labelled} package attr(cancer$age, \"label\") <- \"Age, years\"  # At diagnosis? Unclear (Loprinzi 94) attr(cancer$ph.ecog, \"label\") <- \"Physician-rated ECOG score\" attr(cancer$ph.karno, \"label\") <- \"Physician-rated Karnofsky score\" attr(cancer$pat.karno, \"label\") <- \"Patient-rated Karnofsky score\" attr(cancer$sex, \"label\") <- \"Sex\"  design <- cancer %>%   table1_design(     age, ph.ecog, ph.karno, pat.karno,      by = sex,      continuous_type = \"mean (sd)\") %>%  # default: \"median (iqr)\"   mutate(  # rounding specifically for the \"age\" variable     digits = if_else(       outcome == \"age\",       true = 1,       false = NA))  design %>%   rifttable(     diff_digits = 0,  # rounding for continuous variables other than age     overall = TRUE) %>%  # add unstratified \"overall\" column   rt_gt() %>%  # obtain formatted output   gt::tab_footnote(     footnote = \"Data shown are count (percent) or mean (standard deviation).\")"},{"path":"/articles/table1.html","id":"add-more-statistics-per-variable","dir":"Articles","previous_headings":"","what":"Add more statistics per variable","title":"A Descriptive Table 1","text":"age variable, just display mean standard deviation, also range. end, edit design just like regular dataset. N Age, years Mean (SD) Range Physician-rated ECOG score 0 1 2 3 Unknown Physician-rated Karnofsky score Unknown Patient-rated Karnofsky score Unknown","code":"design_new <- design %>%   mutate(  # create three rows, not one, for \"age\"     copy = if_else(       outcome == \"age\",        true = 3,        false = 1)) %>%   tidyr::uncount(copy, .id = \"copy\") %>%   mutate(  # set new labels and types for the three rows on age     label = case_when(       outcome == \"age\" & copy == 2 ~ \"  Mean (SD)\",       outcome == \"age\" & copy == 3 ~ \"  Range\",       TRUE ~ label),     type = case_when(       outcome == \"age\" & copy == 1 ~ \"\",       outcome == \"age\" & copy == 2 ~ \"mean (sd)\",       outcome == \"age\" & copy == 3 ~ \"range\",       TRUE ~ type)) design_new #> # A tibble: 14 × 7 #>    label                             outcome   type  na_rm exposure digits  copy #>    <chr>                             <chr>     <chr> <lgl> <chr>     <dbl> <int> #>  1 \"N\"                               \"\"        \"tot… NA    sex          NA     1 #>  2 \"Age, years\"                      \"age\"     \"\"    FALSE sex           1     1 #>  3 \"  Mean (SD)\"                     \"age\"     \"mea… FALSE sex           1     2 #>  4 \"  Range\"                         \"age\"     \"ran… FALSE sex           1     3 #>  5 \"Physician-rated ECOG score\"      \"\"        \"\"    FALSE sex          NA     1 #>  6 \"  0\"                             \"ph.ecog… \"out… TRUE  sex          NA     1 #>  7 \"  1\"                             \"ph.ecog… \"out… TRUE  sex          NA     1 #>  8 \"  2\"                             \"ph.ecog… \"out… TRUE  sex          NA     1 #>  9 \"  3\"                             \"ph.ecog… \"out… TRUE  sex          NA     1 #> 10 \"  Unknown\"                       \"ph.ecog… \"out… FALSE sex          NA     1 #> 11 \"Physician-rated Karnofsky score\" \"ph.karn… \"mea… TRUE  sex          NA     1 #> 12 \"  Unknown\"                       \"ph.karn… \"out… FALSE sex          NA     1 #> 13 \"Patient-rated Karnofsky score\"   \"pat.kar… \"mea… TRUE  sex          NA     1 #> 14 \"  Unknown\"                       \"pat.kar… \"out… FALSE sex          NA     1 design_new %>%   rifttable(     diff_digits = 0,     overall = TRUE) %>%   rt_gt() %>%   gt::tab_footnote(     footnote = \"Data shown are count (percent), unless indicated otherwise.\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Konrad H. Stopsack. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stopsack K (2024). rifttable: Results Tables Bridge Rift Epidemiologists Data. R package version 0.6.3, https://github.com/stopsack/rifttable, https://stopsack.github.io/rifttable.","code":"@Manual{,   title = {rifttable: Results Tables to Bridge the Rift Between Epidemiologists and Their Data},   author = {Konrad H. Stopsack},   year = {2024},   note = {R package version 0.6.3, https://github.com/stopsack/rifttable},   url = {https://stopsack.github.io/rifttable}, }"},{"path":"/index.html","id":"automated-reproducible-generation-of-results-tables-bridging-the-rift-between-epidemiologists-and-their-data","dir":"","previous_headings":"","what":"Results Tables to Bridge the Rift Between Epidemiologists and Their Data","title":"Results Tables to Bridge the Rift Between Epidemiologists and Their Data","text":"Tables key format epidemiologists present results. Many results tables applied studies merely show point estimates confidence intervals, even p-values, regression models: “growing rift epidemiologists data” (Rothman 2017). “Actual,” descriptive data, counts stratified exposure main confounder effect modifier, often lacking. rifttable creates presentation-ready results tables epidemiologists automated, reproducible fashion. user provides final analytical dataset specifies design table, rows /columns defined exposure(s), effect modifier(s), estimands desired, allowing show descriptors inferential estimates one table – bridging rift epidemiologists data, one table time.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Results Tables to Bridge the Rift Between Epidemiologists and Their Data","text":"can install development version rifttable directly GitHub: installation procedure requires {remotes} package, obtainable via install.packages(\"remotes\").","code":"remotes::install_github(\"stopsack/rifttable\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Results Tables to Bridge the Rift Between Epidemiologists and Their Data","text":"examples, see Get Started vignette.","code":"library(rifttable)  example_design <- tibble::tribble(   ~label,                       ~type,                   ~stratum,            \"Overall\",                    \"\",                      \"\",                  \"– Deaths/N\",                 \"outcomes/total\",        c(\"Low\", \"High\"),    \"– Risk\",                     \"risk\",                  c(\"Low\", \"High\"),    \"– Risk ratio (95% CI)\",      \"rr\",                    c(\"Low\", \"High\"),    \"– Risk difference (95% CI)\", \"rd\",                    c(\"Low\", \"High\"),    \"\",                           \"\",                      \"\",                  \"Low hormone receptor\",       \"\",                      \"\",                  \"– Deaths/N (Risk)\",          \"outcomes/total (risk)\", \"Low\",              \"– Risk difference (95% CI)\", \"rd\",                    \"Low\",              \"High hormone receptor\",      \"\",                      \"\",                  \"– Deaths/N (Risk)\",          \"outcomes/total (risk)\", \"High\",   \"– Risk difference (95% CI)\", \"rd\",                    \"High\") %>%   dplyr::mutate(     exposure = \"stage\",     outcome = \"death\",     effect_modifier = \"receptor\")  rifttable(   design = example_design,   data = risks::breastcancer)"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/rifttable.html","id":null,"dir":"Reference","previous_headings":"","what":"Results Tables for Epidemiology — rifttable","title":"Results Tables for Epidemiology — rifttable","text":"function displays descriptive inferential results binary, continuous, survival data format table stratified exposure , requested, effect modifiers. function intended tabulations final results. Model diagnostics regression models need conducted separately.","code":""},{"path":"/reference/rifttable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results Tables for Epidemiology — rifttable","text":"","code":"rifttable(   design,   data,   layout = \"rows\",   factor = 1000,   risk_percent = FALSE,   risk_digits = dplyr::if_else(risk_percent == TRUE, true = 0, false = 2),   diff_digits = 2,   ratio_digits = 2,   ratio_digits_decrease = c(`2.995` = -1, `9.95` = -2),   rate_digits = 1,   to = \", \",   reference = \"(reference)\",   type2_layout = \"rows\",   overall = FALSE,   exposure_levels = c(\"noempty\", \"nona\", \"all\") )"},{"path":"/reference/rifttable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results Tables for Epidemiology — rifttable","text":"design Design matrix (data frame) sets table. See Details. Must provided. data Dataset used analyses. Must provided unless design generated table1_design. layout Optional. \"rows\" uses design rows exposure categories columns. \"cols\" opposite: design columns exposure categories rows. Defaults \"rows\". factor Optional. Used type = \"rates\": Factor multiply events per person-time . Defaults 1000. risk_percent Optional. Show risk risk difference estimates percentage points instead proportions. Defaults FALSE unless design generated table1_design. latter case, risk_percent provided, default TRUE. risk_digits Optional. Number decimal digits show risks/ cumulative incidence. Defaults 2 risk_percent = FALSE 0 risk_percent = TRUE. Can override line type. diff_digits Optional. Number decimal digits show rounding means mean difference estimates. Defaults 2. ratio_digits Optional. Number decimal digits show ratio estimates. Defaults 2. Can override line type. ratio_digits_decrease Optional. Lower limits ratios fewer digits shown. Provide named vector format, c(`3` = -2, `10` = -2) reduce number rounding digits 1 digit ratios greater 3 2 digits ratios greater 10 (default). disable, set NULL. rate_digits Optional. Number decimal digits show rates. Defaults 1. Can override line type. Optional. Separator lower upper bound 95% confidence interval (interquartile range medians). Defaults \", \". reference Optional. Defaults \"(reference)\". Alternative label reference category. type2_layout Optional. second estimate requested via type2 design matrix, display rows (\"rows\") columns (\"columns\") right. Defaults \"rows\". overall Optional. Defaults FALSE. Add first column unstratified estimates exposure-stratified table? Elements shown absolute estimates (e.g., type = \"mean\") blank comparatible estimates (e.g., mean difference via type = \"diff\"). exposure_levels Optional. Defaults \"noempty\". Show exposure levels exist data \"NA\" (\"noempty\"); show exposure levels neither \"NA\" empty (\"nona\"); show exposure levels (\"\"), even \"NA\" factor level exist data.","code":""},{"path":"/reference/rifttable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results Tables for Epidemiology — rifttable","text":"Tibble. Get formatted output gt table passing rt_gt.","code":""},{"path":"/reference/rifttable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results Tables for Epidemiology — rifttable","text":"main input parameter dataset design. Always required column type (type requested statistic, see ), well outcome binary outcomes time event survival outcomes: label label row (column). missing, type used label. exposure Optional. exposure variable. Must categorical (factor logical). missing (NA), unstratified table absolute estimates returned. outcome outcome variable non-survival data (.e., whenever event time used). risk/prevalence data, variable must 0/1 FALSE/TRUE. time time variable survival data. Needed , e.g., type = \"hr\" type = \"rate\" (.e., whenever outcome used). time2 second time variable late entry models. used conjunction time. provided, time become entry time time2 exit time, following conventions Surv. event event variable survival data. Events typically 1, censored observations 0. competing events present, censoring first-ordered level, e.g., factor, level corresponding event interest supplied event = \"event_variable@Recurrence\" \"Recurrence\" event interest. event variable needed , e.g., type = \"hr\" type = \"rate\", .e., whenever outcome used. trend Optional. regression models, continuous representation exposure, slope per one unit increase (\"trend\") estimated. Must numeric variable. joint models exposure effect_modifier requested, trends still reported within stratum effect_modifier. Use NA leave blank. effect_modifier Optional. categorical effect modifier variable. Use NA leave blank. stratum Optional. stratum effect modifier. Use NULL leave blank. NA evaluate observations missing data effect_modifier. confounders Optional. string format \"+ var1 + var2\" substituted formula = exposure + confounders. Use NA \"\" (empty string) leave blank; default. Cox models, can add \"+ strata(site)\" obtain models stratification , e.g., site. Poisson models, can add \"+ offset(log(persontime))\" define, e.g., persontime offset. weights Optional. Variable weights, example inverse- probability weights. Used comparative survival estimators (e.g., type = \"hr\" type = \"cumincdiff\") well type = \"cuminc\" type = \"surv\". ignored estimators. type statistic requested (case-insensitive): Comparative estimates 95% confidence intervals: \"hr\" Hazard ratio Cox proportional hazards regression. \"irr\" Incidence rate ratio count outcomes Poisson regression model. \"irrrob\" Ratio outcomes Poisson regression model robust (sandwich) standard errors. \"rr\" Risk ratio (prevalence ratio) riskratio. Can request specific model fitting  approach , marginal standardization , number bootstrap repeats. Examples: \"rrglm_start\" \"rrmargstd 2000\". \"rd\" Risk difference (prevalence difference) riskdiff. Can request model fitting approach bootstrap repeats \"rr\". \"diff\" Mean difference linear model. \"quantreg\" Quantile difference quantile regression using rq method = \"fn\". default, difference medians. different quantile, e.g., 75th percentile, use \"quantreg 0.75\". \"fold\" Fold change generalized linear model log link (.e., ratio arithmetic means). \"foldlog\" Fold change linear model log transformation outcome (.e., ratio geometric means). \"\" Odds ratio logistic regression. \"survdiff\" Difference survival Kaplan-Meier estimator. Provide time horizon, e.g., \"survdiff 2.5\" evaluate differences survival 2.5 years. Uses survdiff_ci. \"cumincdiff\" Difference cumulative incidence Kaplan-Meier estimator , competing risks present, generalized form, Aalen-Johansen estimator. Provide time horizon, e.g., \"cumincdiff 2.5\" evaluate differences cumulative incidence 2.5 years. Uses survdiff_ci. \"survratio\" Ratio survival Kaplan-Meier estimator. Provide time horizon, e.g., \"survdiff 2.5\" evaluate 2.5-year relative risk. Uses survdiff_ci. \"cumincratio\" Ratio cumulative incidence Kaplan-Meier estimator , competing risks present, generalized form, Aalen-Johansen estimator. Provide time horizon, e.g., \"cumincdiff 2.5\" evaluate 2.5-year risk difference. Uses survdiff_ci. Absolute estimates per exposure category: \"events\" Event count. \"time\" Person-time. \"outcomes\" Outcome count. \"total\" Number observations. \"events/time\" Events slash person-time. \"events/total\" Events slash number observations. \"cases/controls\" Cases non-cases (events non-events); useful case-control studies. \"risk\" Risk (prevalence), calculated proportion, .e., outcomes divided number observations. Change display proportion percent using parameter risk_percent. \"risk (ci)\" Risk 95% confidence interval (Wilson score interval binomial proportions, see scoreci). \"cuminc\" Cumulative incidence (\"risk\") Kaplan-Meier estimator , competing risks present, generalized form, Aalen-Johansen estimator. Provide time point (e.g., 1.5-year cumulative incidence) using \"cuminc 1.5\". time point provided, cumulative incidence end follow-returned. Change display proportion percent using parameter risk_percent. \"cuminc (ci)\" Cumulative incidence (\"risk\"), , 95% confidence intervals (Greenwood standard errors log transformation, default survival package/ survfit). Provide time point \"cuminc\". \"surv\" Survival Kaplan-Meier estimator. Provide time point (e.g., 1.5-year survival) using \"surv 1.5\". time point provided, returns survival end follow-. Change display proportion percent using parameter risk_percent. \"surv (ci)\" Survival Kaplan-Meier estimator 95% confidence interval (Greenwood standard errors log transformation, default survival package/survfit). Provide time point \"surv\". \"rate\" Event rate: event count divided person-time, multiplied factor. \"rate (ci)\" Event rate 95% confidence interval (Poisson-type large-sample interval). \"outcomes (risk)\" combination: Outcomes followed risk parentheses. \"outcomes/total (risk)\" combination: Outcomes slash total followed risk parentheses. \"events/time (rate)\" combination: Events slash time followed rate parentheses. \"medsurv\" Median survival. \"medsurv (ci)\" Median survival 95% confidence interval. \"medfu\" Median follow-(reverse Kaplan-Meier), equals median survival censoring. \"medfu (iqr)\" Median interquartile range follow-. \"maxfu\" Maximum follow-time. \"mean\" Mean (arithmetic mean). \"mean (ci)\" Mean 95% CI. \"mean (sd)\" Mean standard deviation. \"geomean\" Geometric mean. \"median\" Median. \"median (iqr)\" Median interquartile range. \"range\" Range: Minimum maximum value. \"blank\" \"\" empty line. Custom: custom function must available name estimate_my_function order callable type = \"my_function\". default, regression models fit separately stratum effect_modifier. Append \"_joint\" \"hr\", \"rr\", \"rd\", \"irr\", \"irrrob\", \"diff\", \"fold\", \"foldlog\", \"quantreg\", \"\" obtain \"joint\" models exposure effect modifier single reference category. Example: type = \"hr_joint\". reference categories exposure effect modifier first factor levels, can changed using fct_relevel forcats package. Note joint model fit across non-missing (NA) strata effect modifier, even design table request strata shown. type2 Optional. second statistic added adjacent row column (global option type2_layout defaults \"row\" can alternatively set \"column\"). example, use type = \"events/times\", type2 = \"hr\" get event counts/person-time hazard ratios data, exposure, stratum, confounders, outcome. digits Optional. number digits rounding individual line. Defaults NA, number digits determined based rifttable's arguments risk_percent, risk_digits, diff_digits, ratio_digits, rate_digits, applicable. digits2 Optional. digits, second estimate (type2). nmin. Optional. Suppress estimates \"--\" cell defined exposure, possibly effect modifier, contains fewer observations , survival analyses, fewer events nmin. Defaults NA, .e., print estimates. na_rm. Optional. Exclude observations missing outcome. Defaults FALSE. Use caution. ci. Optional. Confidence level. Defaults 0.95. Use tibble, tribble, mutate construct design dataset, especially variables used repeatedly (e.g., exposure, time, event, outcome). See examples. regression models provide estimates stratum, e.g., events, \"--\" printed. Accompanying warnings need suppressed manually, appropriate, using suppressWarnings(rifttable(...)).","code":""},{"path":[]},{"path":"/reference/rifttable.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Results Tables for Epidemiology — rifttable","text":"Greenland S, Rothman KJ (2008). Introduction Categorical Statistics. : Rothman KJ, Greenland S, Lash TL. Modern Epidemiology, 3rd edition. Philadelpha, PA: Lippincott Williams & Wilkins. Page 242. (Poisson/large-sample approximation variance incidence rates)","code":""},{"path":"/reference/rifttable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results Tables for Epidemiology — rifttable","text":"","code":"# Load 'cancer' dataset from survival package (Used in all examples) data(cancer, package = \"survival\")  # The exposure (here, 'sex') must be categorical cancer <- cancer %>%   tibble::as_tibble() %>%   dplyr::mutate(     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")),     time = time / 365.25,     status = status - 1)   # Example 1: Binary outcomes (use 'outcome' variable) # Set table design design1 <- tibble::tibble(   label = c(     \"Outcomes\",     \"Total\",     \"Outcomes/Total\",     \"Risk\",     \"Risk (CI)\",     \"Outcomes (Risk)\",     \"Outcomes/Total (Risk)\",     \"RR\",     \"RD\")) %>%   dplyr::mutate(     type = label,     exposure = \"sex\",     outcome = \"status\")  # Generate rifttable rifttable(   design = design1,   data = cancer) #> # A tibble: 9 × 3 #>   sex                   Male              Female               #>   <chr>                 <chr>             <chr>                #> 1 Outcomes              112               53                   #> 2 Total                 138               90                   #> 3 Outcomes/Total        112/138           53/90                #> 4 Risk                  0.81              0.59                 #> 5 Risk (CI)             0.81 (0.74, 0.87) 0.59 (0.49, 0.68)    #> 6 Outcomes (Risk)       112 (0.81)        53 (0.59)            #> 7 Outcomes/Total (Risk) 112/138 (0.81)    53/90 (0.59)         #> 8 RR                    1 (reference)     0.73 (0.60, 0.88)    #> 9 RD                    0 (reference)     -0.22 (-0.34, -0.10)  # Use 'design' as columns (selecting RR and RD only) rifttable(   design = design1 %>%     dplyr::filter(label %in% c(\"RR\", \"RD\")),   data = cancer,   layout = \"cols\") #> # A tibble: 2 × 3 #>   sex    RR                RD                   #>   <chr>  <chr>             <chr>                #> 1 Male   1 (reference)     0 (reference)        #> 2 Female 0.73 (0.60, 0.88) -0.22 (-0.34, -0.10)   # Example 2: Survival outcomes (use 'time' and 'event'), #   with an effect modifier and a confounder # Set table design design2 <- tibble::tribble(   # Elements that vary by row:   ~label,                       ~stratum, ~confounders, ~type,   \"**Overall**\",                NULL,     \"\",           \"blank\",   \"  Events\",                   NULL,     \"\",           \"events\",   \"  Person-years\",             NULL,     \"\",           \"time\",   \"  Rate/1000 py (95% CI)\",    NULL,     \"\",           \"rate (ci)\",   \"  Unadjusted HR (95% CI)\",   NULL,     \"\",           \"hr\",   \"  Age-adjusted HR (95% CI)\", NULL,     \"+ age\",      \"hr\",   \"\",                           NULL,     \"\",           \"blank\",   \"**Stratified models**\",      NULL,     \"\",           \"\",   \"*ECOG PS1* (events/N)\",      1,        \"\",           \"events/total\",   \"  Unadjusted\",               1,        \"\",           \"hr\",   \"  Age-adjusted\",             1,        \"+ age\",      \"hr\",   \"*ECOG PS2* (events/N)\",      2,        \"\",           \"events/total\",   \"  Unadjusted\",               2,        \"\",           \"hr\",   \"  Age-adjusted\",             2,        \"+ age\",      \"hr\",   \"\",                           NULL,     \"\",           \"\",   \"**Joint model**, age-adj.\",  NULL,     \"\",           \"\",   \"  ECOG PS1\",                 1,        \"+ age\",      \"hr_joint\",   \"  ECOG PS2\",                 2,        \"+ age\",      \"hr_joint\") %>%   # Elements that are the same for all rows:   dplyr::mutate(     exposure = \"sex\",     event = \"status\",     time = \"time\",     effect_modifier = \"ph.ecog\")  # Generate rifttable rifttable(   design = design2,   data = cancer %>%     dplyr::filter(ph.ecog %in% 1:2)) #> # A tibble: 18 × 3 #>    sex                          Male                     Female                  #>    <chr>                        <chr>                    <chr>                   #>  1 \"**Overall**\"                \"\"                       \"\"                      #>  2 \"  Events\"                   \"82\"                     \"44\"                    #>  3 \"  Person-years\"             \"70\"                     \"59\"                    #>  4 \"  Rate/1000 py (95% CI)\"    \"1164.8 (938.1, 1446.3)\" \"746.7 (555.7, 1003.4)\" #>  5 \"  Unadjusted HR (95% CI)\"   \"1 (reference)\"          \"0.60 (0.41, 0.86)\"     #>  6 \"  Age-adjusted HR (95% CI)\" \"1 (reference)\"          \"0.60 (0.41, 0.86)\"     #>  7 \"\"                           \"\"                       \"\"                      #>  8 \"**Stratified models**\"      \"\"                       \"\"                      #>  9 \"*ECOG PS1* (events/N)\"      \"54/71\"                  \"28/42\"                 #> 10 \"  Unadjusted\"               \"1 (reference)\"          \"0.53 (0.33, 0.85)\"     #> 11 \"  Age-adjusted\"             \"1 (reference)\"          \"0.53 (0.33, 0.85)\"     #> 12 \"*ECOG PS2* (events/N)\"      \"28/29\"                  \"16/21\"                 #> 13 \"  Unadjusted\"               \"1 (reference)\"          \"0.70 (0.37, 1.30)\"     #> 14 \"  Age-adjusted\"             \"1 (reference)\"          \"0.68 (0.34, 1.36)\"     #> 15 \"\"                           \"\"                       \"\"                      #> 16 \"**Joint model**, age-adj.\"  \"\"                       \"\"                      #> 17 \"  ECOG PS1\"                 \"1 (reference)\"          \"0.55 (0.35, 0.88)\"     #> 18 \"  ECOG PS2\"                 \"1.54 (0.98, 2.44)\"      \"1.10 (0.62, 1.98)\"       # Example 3: Get two estimates using 'type' and 'type2' design3 <- tibble::tribble(   ~label,     ~stratum, ~type,          ~type2,   \"ECOG PS1\", 1,        \"events/total\", \"hr\",   \"ECOG PS2\", 2,        \"events/total\", \"hr\") %>%   dplyr::mutate(     exposure = \"sex\",     event = \"status\",     time = \"time\",     confounders = \"+ age\",     effect_modifier = \"ph.ecog\")  rifttable(   design = design3,   data = cancer %>%     dplyr::filter(ph.ecog %in% 1:2)) #> # A tibble: 4 × 3 #>   sex        Male          Female            #>   <chr>      <chr>         <chr>             #> 1 \"ECOG PS1\" 54/71         28/42             #> 2 \"\"         1 (reference) 0.53 (0.33, 0.85) #> 3 \"ECOG PS2\" 28/29         16/21             #> 4 \"\"         1 (reference) 0.68 (0.34, 1.36)  rifttable(   design = design3,   data = cancer %>%     dplyr::filter(ph.ecog %in% 1:2),   layout = \"cols\",   type2_layout = \"cols\") #> # A tibble: 2 × 5 #>   sex    `ECOG PS1` `ECOG PS1 `       `ECOG PS2` `ECOG PS2 `       #>   <chr>  <chr>      <chr>             <chr>      <chr>             #> 1 Male   54/71      1 (reference)     28/29      1 (reference)     #> 2 Female 28/42      0.53 (0.33, 0.85) 16/21      0.68 (0.34, 1.36)   # Example 4: Continuous outcomes (use 'outcome' variable); # request rounding to 1 decimal digit in some cases; # add continuous trend (slope per one unit of the 'trend' variable) tibble::tribble(   ~label,                   ~stratum, ~type,        ~digits,   \"Marginal mean (95% CI)\", NULL,     \"mean (ci)\",  1,   \"  Male\",                 \"Male\",   \"mean\",       NA,   \"  Female\",               \"Female\", \"mean\",       NA,   \"\",                       NULL,     \"\",           NA,   \"Stratified model\",       NULL,     \"\",           NA,   \"  Male\",                 \"Male\",   \"diff\",       1,   \"  Female\",               \"Female\", \"diff\",       1,   \"\",                       NULL,     \"\",           NA,   \"Joint model\",            NULL,     \"\",           NA,   \"  Male\",                 \"Male\",   \"diff_joint\", NA,   \"  Female\",               \"Female\", \"diff_joint\", NA) %>%   dplyr::mutate(     exposure = \"ph.ecog_factor\",     trend = \"ph.ecog\",     outcome = \"age\",     effect_modifier = \"sex\") %>%   rifttable(     data = cancer %>%       dplyr::filter(ph.ecog < 3) %>%       dplyr::mutate(ph.ecog_factor = factor(ph.ecog))) #> # A tibble: 11 × 5 #>    ph.ecog_factor           `0`                   `1`                `2`   Trend #>    <chr>                    <chr>                 <chr>              <chr> <chr> #>  1 \"Marginal mean (95% CI)\" \"61.2 (58.8, 63.5)\"   \"61.5 (59.8, 63.1… \"66.… \"\"    #>  2 \"  Male\"                 \"63.00\"               \"62.79\"            \"65.… \"\"    #>  3 \"  Female\"               \"58.70\"               \"59.19\"            \"67.… \"\"    #>  4 \"\"                       \"\"                    \"\"                 \"\"    \"\"    #>  5 \"Stratified model\"       \"\"                    \"\"                 \"\"    \"\"    #>  6 \"  Male\"                 \"0 (reference)\"       \"-0.2 (-3.9, 3.5)\" \"2.0… \"0.9… #>  7 \"  Female\"               \"0 (reference)\"       \"0.5 (-3.5, 4.5)\"  \"9.2… \"4.4… #>  8 \"\"                       \"\"                    \"\"                 \"\"    \"\"    #>  9 \"Joint model\"            \"\"                    \"\"                 \"\"    \"\"    #> 10 \"  Male\"                 \"0 (reference)\"       \"-0.21 (-3.75, 3.… \"2.0… \"0.9… #> 11 \"  Female\"               \"-4.30 (-8.70, 0.11)\" \"-3.81 (-7.74, 0.… \"4.9… \"4.3…   # Example 5: Get formatted output for Example 2 (see above) if (FALSE) { rifttable(design = design2,        data = cancer %>% dplyr::filter(ph.ecog %in% 1:2)) %>%   rt_gt(md = 1)  # get markdown formatting in first column ('label') }"},{"path":"/reference/rt_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn tibble into gt Table with Custom Formatting — rt_gt","title":"Turn tibble into gt Table with Custom Formatting — rt_gt","text":"Formatting includes: Text align top/left Smaller row padding top border Bold column labels function called within document knit plain markdown, format: gfm Quarto document format: github_document RMarkdown document, plain markdown-formatted table (e.g., without footnotes) returned via kable.","code":""},{"path":"/reference/rt_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn tibble into gt Table with Custom Formatting — rt_gt","text":"","code":"rt_gt(df, md = 1, indent = 10, remove_border = TRUE)"},{"path":"/reference/rt_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn tibble into gt Table with Custom Formatting — rt_gt","text":"df Data frame/tibble md Optional. NULL, given columns printed markdown formatting, e.g., md = c(1, 3) columns 1 3. Defaults 1, .e., first column. indent Optional. Detects cells first column table, e.g., rifttable first column contains labels, start least two spaces. text indented via tab_style. Defaults 10 10 pixels. Set NULL turn . remove_border Optional. rows indented first column empty first column, remove upper horizontal border line? Defaults TRUE.","code":""},{"path":"/reference/rt_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn tibble into gt Table with Custom Formatting — rt_gt","text":"Formatted gt table","code":""},{"path":[]},{"path":"/reference/rt_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn tibble into gt Table with Custom Formatting — rt_gt","text":"","code":"if (FALSE) { data(mtcars) mtcars %>%   dplyr::slice(1:5) %>%   rt_gt() }"},{"path":"/reference/scoreci.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilson Score Confidence Intervals — scoreci","title":"Wilson Score Confidence Intervals — scoreci","text":"\"function computes confidence interval proportion. based inverting large-sample normal score test proportion.\" (Alan Agresti, wrote original R code) Inputs success, total, level vectorized.","code":""},{"path":"/reference/scoreci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilson Score Confidence Intervals — scoreci","text":"","code":"scoreci(success, total, level = 0.95, return_midpoint = FALSE)"},{"path":"/reference/scoreci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilson Score Confidence Intervals — scoreci","text":"success Success count. total Total count. level Optional. Confidence level. Defaults 0.95. return_midpoint Optional. Return midpoint confidence interval? Defaults FALSE.","code":""},{"path":"/reference/scoreci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilson Score Confidence Intervals — scoreci","text":"Data frame: success Success count total Total count estimate Proportion conf.low Lower bound confidence interval. conf.high Upper bound confidence interval. midpoint Mid-point confidence interval (return_midpoint = TRUE). level Confidence level.","code":""},{"path":[]},{"path":"/reference/scoreci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wilson Score Confidence Intervals — scoreci","text":"","code":"scoreci(success = 5, total = 10) #>   success total estimate  conf.low conf.high level #> 1       5    10      0.5 0.2365931 0.7634069  0.95 scoreci(success = c(5:10), total = 10, level = 0.9) #>   success total estimate  conf.low conf.high level #> 1       5    10      0.5 0.2692718 0.7307282   0.9 #> 2       6    10      0.6 0.3516386 0.8057730   0.9 #> 3       7    10      0.7 0.4416998 0.8731234   0.9 #> 4       8    10      0.8 0.5407928 0.9314420   0.9 #> 5       9    10      0.9 0.6522813 0.9773651   0.9 #> 6      10    10      1.0 0.7870580 1.0000000   0.9"},{"path":"/reference/survdiff_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"function estimates unadjusted difference ratio survival cumulative incidence (risk) given time point based difference per-group Kaplan-Meier estimates , competing events prevent, Aalen-Johansen estimates cumulative incidence. constructing confidence limits, MOVER approach described Zou Donner (2008) used, estimation log scale ratios.","code":""},{"path":"/reference/survdiff_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"","code":"survdiff_ci(   formula,   data,   time,   estimand = c(\"survival\", \"cuminc\"),   type = c(\"diff\", \"ratio\"),   approach = c(\"mover\", \"squareadd\"),   conf.level = 0.95,   event_type = NULL,   id_variable = NULL,   weighted = FALSE )"},{"path":"/reference/survdiff_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"formula Formula survival object using Surv form, Surv(time, event) ~ group. exposure variable (, group) must categorical least 2 categories. data Data set. time Time point estimate survival difference . estimand Optional. Estimate difference survival (\"survival\") cumulative incidence (\"cuminc\")? parameter affects sign differences. \"cuminc\" available competing events present, .e., event_type NULL. Defaults \"survival\". type Optional. Estimate differences (\"diff\") ratio (\"ratio\") survival cumulative incidence? Defaults \"diff\". approach Optional. estimating confidence limits differences, use MOVER approach based upper lower confidence limits group (\"mover\"), square--add standard errors (\"squareadd\")? Defaults \"mover\". conf.level Optional. Confidence level. Defaults 0.95. event_type Optional. Event type (level) event variable competing events. Defaults NULL. id_variable Optional. Identifiers individual oberversations, required data clustered, competing events time/time2 notation used concomitantly. weighted Optional. Weigh survival curves, e.g. inverse-probability weighting, estating differences ratios? TRUE, data must contain variable called .weights. Defaults FALSE.","code":""},{"path":"/reference/survdiff_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"Tibble tidy format: term Name exposure stratum. estimate Difference ratio. std.error Large-sample standard error difference survival functions (see References). survival function, Greenwood standard errors log transformation used, default survival package/survfit). statistic z statistic. p.value z statistic. conf.low Lower confidence limit conf.high Upper confidence limit","code":""},{"path":"/reference/survdiff_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"Com-Nougue C, Rodary C, Patte C. establish equivalence data censored: randomized trial treatments B non-Hodgkin lymphoma. Stat Med 1993;12:1353–64. https://doi.org/10.1002/sim.4780121407. Altman DG, Andersen PK. Calculating number needed treat trials outcome time event. BMJ 1999;319:1492–5. https://doi.org/10.1136/bmj.319.7223.14929. Zou GY, Donner . Construction confidence limits effect measures: general approach. Statist Med 2008;27:1693–1702. https://doi.org/10.1002/sim.3095","code":""},{"path":"/reference/survdiff_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Difference in Survival or Cumulative Incidence and Confidence Interval — survdiff_ci","text":"","code":"# Load 'cancer' dataset from survival package (Used in all examples) data(cancer, package = \"survival\")  cancer <- cancer %>%   dplyr::mutate(     sex = factor(       sex,       levels = 1:2,       labels = c(\"Male\", \"Female\")     ),     status = status - 1   )  survdiff_ci(   formula = survival::Surv(time = time, event = status) ~ sex,   data = cancer,   time = 365.25) #> # A tibble: 1 × 7 #>   term   estimate std.error statistic p.value conf.low conf.high #>   <chr>     <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 Female    0.190    0.0750      2.54 0.00557   0.0475     0.342 # Females have 19 percentage points higher one-year survival than males # (95% CI, 5 to 34 percentage points)."},{"path":"/reference/table1_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Design A Descriptive Table — table1_design","title":"Design A Descriptive Table — table1_design","text":"function generates design table rifttable can generate descriptive table.","code":""},{"path":"/reference/table1_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design A Descriptive Table — table1_design","text":"","code":"table1_design(   data,   ...,   by = NULL,   total = TRUE,   empty_levels = FALSE,   na_always = FALSE,   na_label = \"Unknown\",   continuous_type = \"median (iqr)\",   binary_type = \"outcomes (risk)\" )"},{"path":"/reference/table1_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design A Descriptive Table — table1_design","text":"data Data set ... Optional: Variables include exclude (using -variable) Optional: Stratification variable. Typically exposure. total Optional: Whether add total count beginning. Defaults TRUE. empty_levels Optional: Whether include empty levels factor variables. Defaults FALSE. na_always Optional: Whether add count missing values variable, even none. Defaults FALSE, .e., count missing values shown . na_label Label count missing values. Defaults \"Unknown\". continuous_type Estimator (type rifttable design) continuous variables. Defaults \"median (iqr)\". binary_type Estimator (type rifttable design) binary variables strata categorical variables. Defaults \"outcomes (risk)\" (count column proportion).","code":""},{"path":"/reference/table1_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design A Descriptive Table — table1_design","text":"design tibble can passed rifttable. Contains attribute rt_data dataset provided rifttable another time.","code":""},{"path":"/reference/table1_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design A Descriptive Table — table1_design","text":"","code":"# Data preparation cars <- tibble::as_tibble(mtcars) %>%   dplyr::mutate(     gear = factor(       gear,       levels = 3:5,       labels = c(\"Three\", \"Four\", \"Five\")),     hp_categorical = dplyr::if_else(       hp > 200,       true = \">200 hp\",       false = \"<=200 hp\")) # Label some variables. Better alternative: labelled::set_variable_labels() attr(cars$hp, \"label\") <- \"Horsepower\" attr(cars$hp_categorical, \"label\") <- \"Horsepower\" attr(cars$am, \"label\") <- \"Automatic transmission\" attr(cars$gear, \"label\") <- \"Gears\"  # Generate table \"design\" design <- cars %>%   table1_design(     hp, hp_categorical, mpg, am,     by = gear)  # Use \"design\" to create a descriptive table. design %>%   rifttable(diff_digits = 0) #> # A tibble: 7 × 4 #>   Gears                    Three            Four           Five             #>   <chr>                    <chr>            <chr>          <chr>            #> 1 \"N\"                      \"15\"             \"12\"           \"5\"              #> 2 \"Horsepower\"             \"180 (150, 210)\" \"94 (66, 110)\" \"175 (113, 264)\" #> 3 \"Horsepower\"             \"\"               \"\"             \"\"               #> 4 \"  <=200 hp\"             \"10 (67%)\"       \"12 (100%)\"    \"3 (60%)\"        #> 5 \"  >200 hp\"              \"5 (33%)\"        \"0 (0%)\"       \"2 (40%)\"        #> 6 \"mpg\"                    \"16 (14, 18)\"    \"23 (21, 28)\"  \"20 (16, 26)\"    #> 7 \"Automatic transmission\" \"0 (0%)\"         \"8 (67%)\"      \"5 (100%)\""},{"path":"/news/index.html","id":"rifttable-063","dir":"Changelog","previous_headings":"","what":"rifttable 0.6.3","title":"rifttable 0.6.3","text":"Provide easier interface code competing events directly providing event = \"event_variable@Event_Type_One\" design. multiple event types present, estimate cumulative incidence differences/ratios cumulative incidence competing-event setting. Allow clustered observations survival data, e.g., multiple rows per person. Estimate ratios survival cumulative incidence, .e., x-year risk ratios. Use MOVER estimation confidence intervals ratios differences survival cumulative incidence default. Support weights, e.g., inverse-probability weights, directly via weights argument design. Weighted estimates currently available many survival estimators: type = \"cuminc\", \"surv\", differences ratios (e.g., \"cumincdiff\"), \"hr\". breaking change Cox models (type = \"hr\"), providing weights arguments list now generates error. Allow @ factor levels table1_design(). rt_gt(): Output knitr-formatted tables GitHub-flavored markdown also Quarto .qmd, similar .Rmd. Better handling edge cases, e.g., ratios 0, rounding estimates. Restructure site. Separate documentation estimators outcome type. New FAQs confidence levels, reference levels, custom functions, joint models.","code":""},{"path":"/news/index.html","id":"rifttable-062","dir":"Changelog","previous_headings":"","what":"rifttable 0.6.2","title":"rifttable 0.6.2","text":"Add overall argument exposure_levels let user control handling missing exposure levels (NA) factors empty levels exposure. type = \"geomean\" geometric means. Documentation: Expand FAQs. Consider exposure trend \"\" missing, stratum = \"\" subsetting effect_modifier, instead subsetting effect modifier empty string. Input check stratum must provided joint models strata empty. Consider missing type \"blank\". add empty rows/columns type2 empty results cells trend variable exposure given. Rounding works even result vector contains strings (e.g., estimate). safeguards -NA outcome variables. input checks. warn non-0/1 outcomes log-linear models ratios continuous variables. Add initial set unit tests.","code":""},{"path":"/news/index.html","id":"rifttable-061","dir":"Changelog","previous_headings":"","what":"rifttable 0.6.1","title":"rifttable 0.6.1","text":"Cox models (type = \"hr\") allow weights, clustering, robust standard errors. Argument ratio_digits_decrease: default, decrease number decimal digits shown ratios 1 digit ratios > 3 2 digits ratios > 10. Leads rounded ratios confidence intervals 1.23, 3.4, 11. rt_gt() now indents first column applies markdown formatting default. New FAQ vignette. Binary outcomes returned NA instead 0 unstratified tables -null outcome. type = \"maxfu\" ignored digits diff_digits. Allow different exposure (strata labels) arguments one table. Show unstratified estimate exposure \"\", just NA. rt_gt(): suppress random id gt tables keep git diff slim. Keep variables .event, .outcome, etc. available original names. Require {risks} >= 0.4.2. Examples load breastcancer dataset risks package.","code":""},{"path":"/news/index.html","id":"rifttable-060","dir":"Changelog","previous_headings":"","what":"rifttable 0.6.0","title":"rifttable 0.6.0","text":"set \", \" default, instead \"-\" ratio variables \" \" difference variables Custom functions now directly called via type variable, following restructuring estimation functions greater flexibility. design$type longer accepts additional arguments, time points. Supply list instead via design$arguments. Suppression strata sparse re-identifiable data design$nmin now differentiates counts total observations outcomes, depending estimator. New function table1_design(): Generate design descriptive “Table 1.” New outcome option \"variable@level\" categorical variables displays level binary outcome. Used table1_design(). Support unstratified tables displaying trend/linear slope (trend variable design) without exposure. rifttable(reference = ...): Label reference category. design$ci: Width confidence intervals. design$na_rm: Omitting observations missing outcome data. design$arguments: Flexibly passing along argument estimation functions. New vignette describing estimators. Drop dependency R >= 4.1 native pipe. Require {risks} >= 0.4.0. Remove dependency {labelled} package. {gt} {quantreg} packages now optional soft dependencies. Compatible {dplyr} 1.1.0, {tidyselect} 1.2.0","code":""},{"path":"/news/index.html","id":"rifttable-050","dir":"Changelog","previous_headings":"","what":"rifttable 0.5.0","title":"rifttable 0.5.0","text":"khsmisc::table2() “graduated” package. See {khsmisc} Changelog earlier versions. Add breastcancer() dataset Use R >= 4.1 native pipe, |> Remove RMTL estimators","code":""}]
